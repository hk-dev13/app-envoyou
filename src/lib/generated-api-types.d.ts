/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Obtain access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Token issued */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            access_token?: string;
                            /** @example bearer */
                            token_type?: string;
                        };
                    };
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/measurements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List recent measurements */
        get: {
            parameters: {
                query?: {
                    city?: string;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListMeasurements"];
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                429: components["responses"]["TooManyRequestsError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List stations */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListStations"];
                429: components["responses"]["TooManyRequestsError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/benchmarks/industry/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get industry benchmark distribution */
        get: {
            parameters: {
                query: {
                    metric: string;
                    window?: string;
                };
                header?: never;
                path: {
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Benchmark distribution */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BenchmarkDistribution"];
                    };
                };
                400: components["responses"]["ValidationErrorResponse"];
                404: components["responses"]["NotFoundError"];
                429: components["responses"]["TooManyRequestsError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/benchmarks/peers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Compute peer benchmark for supplied company IDs */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        company_ids: string[];
                        metric: string;
                        /** @example 90d */
                        window?: string;
                    };
                };
            };
            responses: {
                /** @description Peer benchmark result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PeerBenchmark"];
                    };
                };
                400: components["responses"]["ValidationErrorResponse"];
                404: components["responses"]["NotFoundError"];
                429: components["responses"]["TooManyRequestsError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/alerts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List alert rules */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ListAlertRules"];
                401: components["responses"]["UnauthorizedError"];
                429: components["responses"]["TooManyRequestsError"];
            };
        };
        put?: never;
        /** Create alert rule */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AlertRuleCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AlertRule"];
                    };
                };
                400: components["responses"]["ValidationErrorResponse"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/alerts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete alert rule */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/scenarios/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run scenario analysis over a portfolio or company set */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ScenarioRunRequest"];
                };
            };
            responses: {
                /** @description Scenario result set */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ScenarioRunResult"];
                    };
                };
                400: components["responses"]["ValidationErrorResponse"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate sustainability report export bundle */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReportExportRequest"];
                };
            };
            responses: {
                202: components["responses"]["AcceptedExport"];
                400: components["responses"]["ValidationErrorResponse"];
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/report/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get export status / download link */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Export status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReportExport"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/taxonomy/mappings/diff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Diff two taxonomy mapping versions */
        get: {
            parameters: {
                query: {
                    from: string;
                    to: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Mapping diff */
                200: {
                    headers: {
                        "X-RateLimit-Limit": components["headers"]["RateLimitLimit"];
                        "X-RateLimit-Remaining": components["headers"]["RateLimitRemaining"];
                        "X-RateLimit-Reset": components["headers"]["RateLimitReset"];
                        "X-Request-ID": components["headers"]["RequestID"];
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TaxonomyDiff"];
                    };
                };
                400: components["responses"]["ValidationErrorResponse"];
                404: components["responses"]["NotFoundError"];
                429: components["responses"]["TooManyRequestsError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Measurement: {
            station_id?: string;
            /** @example pm25 */
            pollutant?: string;
            value?: number;
            /** @example µg/m³ */
            unit?: string;
            /** Format: date-time */
            captured_at?: string;
            quality_index?: number;
        };
        Station: {
            id?: string;
            name?: string;
            country?: string;
            city?: string;
            latitude?: number;
            longitude?: number;
            elevation_m?: number;
        };
        /** @example {
         *       "metric": "cevs_score",
         *       "window": "30d",
         *       "percentiles": {
         *         "p10": 42.1,
         *         "p25": 55.3,
         *         "p50": 61.8,
         *         "p75": 68.4,
         *         "p90": 74.9
         *       },
         *       "mean": 62.7,
         *       "median": 61.8
         *     } */
        BenchmarkDistribution: {
            metric?: string;
            window?: string;
            percentiles?: {
                [key: string]: number;
            };
            mean?: number;
            median?: number;
        };
        /** @example {
         *       "metric": "water_discharge_ppm",
         *       "window": "90d",
         *       "companies": [
         *         {
         *           "id": "comp_A",
         *           "score": 87.2,
         *           "percentile": 82
         *         },
         *         {
         *           "id": "comp_B",
         *           "score": 76.5,
         *           "percentile": 61
         *         },
         *         {
         *           "id": "comp_C",
         *           "score": 69.1,
         *           "percentile": 48
         *         }
         *       ],
         *       "aggregate": {
         *         "mean": 77.6,
         *         "median": 76.5,
         *         "stddev": 7.4
         *       }
         *     } */
        PeerBenchmark: {
            metric?: string;
            window?: string;
            companies?: {
                id?: string;
                score?: number;
                percentile?: number;
            }[];
            aggregate?: {
                mean?: number;
                median?: number;
                stddev?: number;
            };
        };
        AlertRuleBase: {
            name?: string;
            metric?: string;
            /** @example > */
            operator?: string;
            threshold?: number;
            /** @example 1h */
            window?: string;
            notify?: string[];
            /** @default true */
            enabled: boolean;
        };
        AlertRuleCreate: components["schemas"]["AlertRuleBase"];
        /** @example {
         *       "id": "ar_12345",
         *       "name": "CEVS Score Drop",
         *       "metric": "cevs_score",
         *       "operator": "drop_percent",
         *       "threshold": 5,
         *       "window": "24h",
         *       "notify": [
         *         "slack:#esg-risk"
         *       ],
         *       "enabled": true,
         *       "created_at": "2025-09-13T10:20:11Z",
         *       "last_triggered_at": null
         *     } */
        AlertRule: components["schemas"]["AlertRuleBase"] & {
            id?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            last_triggered_at?: string | null;
        };
        ScenarioRunRequest: {
            targets: string[];
            shocks: {
                /** @example 120 */
                carbon_price?: number;
                /** @example 2 */
                regulation_delay_years?: number;
                /** @example 0.04 */
                intensity_decline_rate?: number;
            };
            /** @example 2030 */
            window?: string;
        };
        /** @example {
         *       "run_id": "scen_f83ab2",
         *       "targets": [
         *         "comp_A",
         *         "comp_B",
         *         "comp_C"
         *       ],
         *       "assumptions": {
         *         "carbon_price": 120,
         *         "regulation_delay_years": 2,
         *         "intensity_decline_rate": 0.04
         *       },
         *       "results": [
         *         {
         *           "target": "comp_A",
         *           "projected_score": 72.4,
         *           "variance_vs_baseline": 3.1
         *         },
         *         {
         *           "target": "comp_B",
         *           "projected_score": 65.2,
         *           "variance_vs_baseline": 1.8
         *         },
         *         {
         *           "target": "comp_C",
         *           "projected_score": 61,
         *           "variance_vs_baseline": 2.4
         *         }
         *       ]
         *     } */
        ScenarioRunResult: {
            run_id?: string;
            targets?: string[];
            assumptions?: Record<string, never>;
            results?: {
                target?: string;
                projected_score?: number;
                variance_vs_baseline?: number;
            }[];
        };
        ReportExportRequest: {
            /** @enum {string} */
            framework: "GRI" | "SASB" | "CSRD";
            /**
             * @default company
             * @enum {string}
             */
            scope: "company" | "portfolio";
            /** @description Company or portfolio identifier */
            id?: string;
            /** @default 3 */
            include_history_years: number;
            /** @default false */
            delta_only: boolean;
        };
        /** @example {
         *       "export_id": "exp_2025_q3_gri",
         *       "framework": "GRI",
         *       "status": "complete",
         *       "generated_at": "2025-09-13T10:30:00Z",
         *       "download_url": "https://exports.envoyou.com/bundles/exp_2025_q3_gri.zip"
         *     } */
        ReportExport: {
            export_id?: string;
            framework?: string;
            /** @enum {string} */
            status?: "queued" | "processing" | "complete" | "failed";
            /** Format: date-time */
            generated_at?: string | null;
            download_url?: string | null;
        };
        /** @example {
         *       "from": 2025.1,
         *       "to": 2025.2,
         *       "added": [
         *         {
         *           "key": "waste_generated_tons",
         *           "code": "GRI:306-3"
         *         }
         *       ],
         *       "removed": [],
         *       "changed": [
         *         {
         *           "key": "scope2_emissions_tco2e",
         *           "from": "GRI:305-2a",
         *           "to": "GRI:305-2"
         *         }
         *       ]
         *     } */
        TaxonomyDiff: {
            from?: string;
            to?: string;
            added?: components["schemas"]["MappingChange"][];
            removed?: components["schemas"]["MappingChange"][];
            changed?: components["schemas"]["MappingDelta"][];
        };
        MappingChange: {
            key?: string;
            code?: string;
        };
        MappingDelta: {
            key?: string;
            from?: string;
            to?: string;
        };
        /** @example {
         *       "error": "invalid_request",
         *       "message": "Invalid metric parameter",
         *       "request_id": "req_8f3a92",
         *       "status": 400
         *     } */
        ErrorResponse: {
            /** @example invalid_request */
            error: string;
            /** @example Invalid metric parameter */
            message: string;
            /** @example req_12345 */
            request_id?: string;
            /** @example 400 */
            status?: number;
        };
        /** @example {
         *       "error": "validation_error",
         *       "message": "One or more fields failed validation",
         *       "status": 400,
         *       "fields": [
         *         {
         *           "field": "company_ids[2]",
         *           "issue": "must be a valid UUID"
         *         }
         *       ]
         *     } */
        ValidationError: {
            /** @example validation_error */
            error: string;
            /** @example One or more fields failed validation */
            message: string;
            /** @example 400 */
            status?: number;
            fields?: {
                /** @example company_ids[2] */
                field?: string;
                /** @example must be a valid UUID */
                issue?: string;
            }[];
        };
    };
    responses: {
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Validation error */
        ValidationErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ValidationError"];
            };
        };
        /** @description Rate limit exceeded */
        TooManyRequestsError: {
            headers: {
                "X-RateLimit-Limit": components["headers"]["RateLimitLimit"];
                "X-RateLimit-Remaining": components["headers"]["RateLimitRemaining"];
                "X-RateLimit-Reset": components["headers"]["RateLimitReset"];
                /** @description Seconds until requests are accepted again. */
                "X-RateLimit-Retry-After"?: number;
                "X-Request-ID": components["headers"]["RequestID"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description List of measurement objects */
        ListMeasurements: {
            headers: {
                "X-RateLimit-Limit": components["headers"]["RateLimitLimit"];
                "X-RateLimit-Remaining": components["headers"]["RateLimitRemaining"];
                "X-RateLimit-Reset": components["headers"]["RateLimitReset"];
                "X-Request-ID": components["headers"]["RequestID"];
                "X-Pagination-Limit": components["headers"]["PaginationLimit"];
                "X-Pagination-Next": components["headers"]["PaginationNext"];
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    items?: components["schemas"]["Measurement"][];
                };
            };
        };
        /** @description Station list */
        ListStations: {
            headers: {
                "X-RateLimit-Limit": components["headers"]["RateLimitLimit"];
                "X-RateLimit-Remaining": components["headers"]["RateLimitRemaining"];
                "X-RateLimit-Reset": components["headers"]["RateLimitReset"];
                "X-Request-ID": components["headers"]["RequestID"];
                "X-Pagination-Limit": components["headers"]["PaginationLimit"];
                "X-Pagination-Next": components["headers"]["PaginationNext"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Station"][];
            };
        };
        /** @description Alert rules */
        ListAlertRules: {
            headers: {
                "X-RateLimit-Limit": components["headers"]["RateLimitLimit"];
                "X-RateLimit-Remaining": components["headers"]["RateLimitRemaining"];
                "X-RateLimit-Reset": components["headers"]["RateLimitReset"];
                "X-Request-ID": components["headers"]["RequestID"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AlertRule"][];
            };
        };
        /** @description Accepted for processing */
        AcceptedExport: {
            headers: {
                "X-RateLimit-Limit": components["headers"]["RateLimitLimit"];
                "X-RateLimit-Remaining": components["headers"]["RateLimitRemaining"];
                "X-RateLimit-Reset": components["headers"]["RateLimitReset"];
                "X-Request-ID": components["headers"]["RequestID"];
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    export_id?: string;
                    /** @example queued */
                    status?: string;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: {
        /** @description The quota ceiling for the current window. */
        RateLimitLimit: number;
        /** @description Requests remaining in the current window. */
        RateLimitRemaining: number;
        /** @description Unix epoch seconds when the current window resets. */
        RateLimitReset: number;
        /** @description Unique ID for tracing this request. */
        RequestID: string;
        /** @description Effective per-page item limit applied. */
        PaginationLimit: number;
        /** @description Cursor token for the next page (omit if no further pages). */
        PaginationNext: string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
